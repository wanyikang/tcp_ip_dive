{"contentType":"application/gliffy+json","version":"1.1","metadata":{"title":"untitled","revision":0,"exportBorder":false},"embeddedResources":{"index":0,"resources":[]},"stage":{"objects":[{"x":199,"y":17,"rotation":0,"id":27,"uid":"com.gliffy.shape.basic.basic_v1.default.text","width":270,"height":30,"lockAspectRatio":false,"lockShape":false,"order":10,"graphic":{"type":"Text","Text":{"tid":null,"valign":"middle","overflow":"none","vposition":"none","hposition":"none","html":"<p style=\"text-align:left;\"><span style=\"font-size: 14px; font-family: Courier; color: rgb(255, 0, 0); white-space: pre-wrap; text-decoration: none; line-height: 14px;\">yourself call Redis.hget()</span></p>","paddingLeft":2,"paddingRight":2,"paddingBottom":2,"paddingTop":2}},"children":null,"linkMap":[]},{"x":311.99999999999994,"y":800,"rotation":0,"id":21,"uid":"com.gliffy.shape.basic.basic_v1.default.text","width":310,"height":14,"lockAspectRatio":false,"lockShape":false,"order":9,"graphic":{"type":"Text","Text":{"tid":null,"valign":"middle","overflow":"none","vposition":"none","hposition":"none","html":"<p style=\"text-align:left;\"><span style=\"font-size: 14px; font-family: Courier; color: rgb(255, 0, 0); white-space: pre-wrap; text-decoration: none; line-height: 14px;\">call ConnectionPool.execute_command</span></p>","paddingLeft":2,"paddingRight":2,"paddingBottom":2,"paddingTop":2}},"children":null,"linkMap":[]},{"x":300.66666666666663,"y":770.5,"rotation":0,"id":22,"uid":"com.gliffy.shape.basic.basic_v1.default.line","width":100,"height":100,"lockAspectRatio":false,"lockShape":false,"order":8,"graphic":{"type":"Line","Line":{"strokeWidth":2,"strokeColor":"#000000","fillColor":"none","dashStyle":null,"startArrow":0,"endArrow":1,"startArrowRotation":"auto","endArrowRotation":"auto","ortho":false,"interpolationType":"linear","cornerRadius":null,"controlPath":[[0,0],[0,92.39348221360399]],"lockSegments":{}}},"children":null,"linkMap":[]},{"x":310,"y":570,"rotation":0,"id":17,"uid":"com.gliffy.shape.basic.basic_v1.default.text","width":296,"height":14,"lockAspectRatio":false,"lockShape":false,"order":7,"graphic":{"type":"Text","Text":{"tid":null,"valign":"middle","overflow":"none","vposition":"none","hposition":"none","html":"<p style=\"text-align:left;\"><span style=\"font-size: 14px; font-family: Courier; color: rgb(255, 0, 0); white-space: pre-wrap; text-decoration: none; line-height: 14px;\">call ConnectionPool.get_connect</span></p>","paddingLeft":2,"paddingRight":2,"paddingBottom":2,"paddingTop":2}},"children":null,"linkMap":[]},{"x":300.66666666666663,"y":537.8032588931981,"rotation":0,"id":16,"uid":"com.gliffy.shape.basic.basic_v1.default.line","width":100,"height":100,"lockAspectRatio":false,"lockShape":false,"order":6,"graphic":{"type":"Line","Line":{"strokeWidth":2,"strokeColor":"#000000","fillColor":"none","dashStyle":null,"startArrow":0,"endArrow":1,"startArrowRotation":"auto","endArrowRotation":"auto","ortho":false,"interpolationType":"linear","cornerRadius":null,"controlPath":[[0,0],[0,92.39348221360399]],"lockSegments":{}}},"children":null,"linkMap":[]},{"x":310,"y":220,"rotation":0,"id":9,"uid":"com.gliffy.shape.basic.basic_v1.default.text","width":298,"height":14,"lockAspectRatio":false,"lockShape":false,"order":5,"graphic":{"type":"Text","Text":{"tid":null,"valign":"middle","overflow":"none","vposition":"none","hposition":"none","html":"<p style=\"text-align:left;\"><span style=\"font-size: 14px; font-family: Courier; color: rgb(255, 0, 0); white-space: pre-wrap; text-decoration: none; line-height: 14px;\">call StrictRedis.execute_command</span></p>","paddingLeft":2,"paddingRight":2,"paddingBottom":2,"paddingTop":2}},"children":null,"linkMap":[]},{"x":300.6666666666667,"y":189,"rotation":0,"id":7,"uid":"com.gliffy.shape.basic.basic_v1.default.line","width":100,"height":100,"lockAspectRatio":false,"lockShape":false,"order":4,"graphic":{"type":"Line","Line":{"strokeWidth":2,"strokeColor":"#000000","fillColor":"none","dashStyle":null,"startArrow":0,"endArrow":1,"startArrowRotation":"auto","endArrowRotation":"auto","ortho":false,"interpolationType":"linear","cornerRadius":null,"controlPath":[[0,0],[0,92.39348221360399]],"lockSegments":{}}},"children":null,"linkMap":[]},{"x":44,"y":880,"rotation":0,"id":6,"uid":"com.gliffy.shape.basic.basic_v1.default.text","width":560,"height":84,"lockAspectRatio":false,"lockShape":false,"order":3,"graphic":{"type":"Text","Text":{"tid":null,"valign":"middle","overflow":"none","vposition":"none","hposition":"none","html":"<p style=\"text-align:left;\"><span style=\"font-size: 14px; font-family: Courier; white-space: pre-wrap; text-decoration: none; line-height: 14px; color: rgb(0, 0, 0);\">    def make_connection(self):\n</span></p><p style=\"text-align:left;\"><span style=\"font-size: 14px; font-family: Courier; white-space: pre-wrap; text-decoration: none; line-height: 14px; color: rgb(0, 0, 0);\">        \"Create a new connection\"\n</span></p><p style=\"text-align:left;\"><span style=\"font-size: 14px; font-family: Courier; white-space: pre-wrap; text-decoration: none; line-height: 14px; color: rgb(0, 0, 0);\">        if self._created_connections &gt;= self.max_connections:\n</span></p><p style=\"text-align:left;\"><span style=\"font-size: 14px; font-family: Courier; white-space: pre-wrap; text-decoration: none; line-height: 14px; color: rgb(0, 0, 0);\">            raise ConnectionError(\"Too many connections\")\n</span></p><p style=\"text-align:left;\"><span style=\"font-size: 14px; font-family: Courier; white-space: pre-wrap; text-decoration: none; line-height: 14px; color: rgb(0, 0, 0);\">        self._created_connections += 1\n</span></p><p style=\"text-align:left;\"><span style=\"font-size: 14px; font-family: Courier; white-space: pre-wrap; text-decoration: none; line-height: 14px; color: rgb(0, 0, 0);\">        return self.connection_class(**self.connection_kwargs)</span></p>","paddingLeft":2,"paddingRight":2,"paddingBottom":2,"paddingTop":2}},"children":null,"linkMap":[]},{"x":42,"y":640,"rotation":0,"id":5,"uid":"com.gliffy.shape.basic.basic_v1.default.text","width":660,"height":126,"lockAspectRatio":false,"lockShape":false,"order":2,"graphic":{"type":"Text","Text":{"tid":null,"valign":"middle","overflow":"none","vposition":"none","hposition":"none","html":"<p style=\"text-align:left;\"><span style=\"font-size: 14px; font-family: Courier; white-space: pre-wrap; text-decoration: none; line-height: 14px; color: rgb(0, 0, 0);\">    def get_connection(self, command_name, *keys, **options):\n</span></p><p style=\"text-align:left;\"><span style=\"font-size: 14px; font-family: Courier; white-space: pre-wrap; text-decoration: none; line-height: 14px; color: rgb(0, 0, 0);\">        \"Get a connection from the pool\"\n</span></p><p style=\"text-align:left;\"><span style=\"font-size: 14px; font-family: Courier; white-space: pre-wrap; text-decoration: none; line-height: 14px; color: rgb(0, 0, 0);\">        self._checkpid()\n</span></p><p style=\"text-align:left;\"><span style=\"font-size: 14px; font-family: Courier; white-space: pre-wrap; text-decoration: none; line-height: 14px; color: rgb(0, 0, 0);\">        try:\n</span></p><p style=\"text-align:left;\"><span style=\"font-size: 14px; font-family: Courier; white-space: pre-wrap; text-decoration: none; line-height: 14px; color: rgb(0, 0, 0);\">            connection = self._available_connections.pop()\n</span></p><p style=\"text-align:left;\"><span style=\"font-size: 14px; font-family: Courier; white-space: pre-wrap; text-decoration: none; line-height: 14px; color: rgb(0, 0, 0);\">        except IndexError:\n</span></p><p style=\"text-align:left;\"><span style=\"font-size: 14px; font-family: Courier; white-space: pre-wrap; text-decoration: none; line-height: 14px; color: rgb(0, 0, 0);\">            connection = self.make_connection()\n</span></p><p style=\"text-align:left;\"><span style=\"font-size: 14px; font-family: Courier; white-space: pre-wrap; text-decoration: none; line-height: 14px; color: rgb(0, 0, 0);\">        self._in_use_connections.add(connection)\n</span></p><p style=\"text-align:left;\"><span style=\"font-size: 14px; font-family: Courier; white-space: pre-wrap; text-decoration: none; line-height: 14px; color: rgb(0, 0, 0);\">        return connection</span></p>","paddingLeft":2,"paddingRight":2,"paddingBottom":2,"paddingTop":2}},"children":null,"linkMap":[]},{"x":40,"y":292,"rotation":0,"id":3,"uid":"com.gliffy.shape.basic.basic_v1.default.text","width":690,"height":224,"lockAspectRatio":false,"lockShape":false,"order":1,"graphic":{"type":"Text","Text":{"tid":null,"valign":"middle","overflow":"none","vposition":"none","hposition":"none","html":"<p style=\"text-align:left;\"><span style=\"font-size: 14px; font-family: Courier; white-space: pre-wrap; text-decoration: none; line-height: 14px; color: rgb(0, 0, 0);\">    def execute_command(self, *args, **options):\n</span></p><p style=\"text-align:left;\"><span style=\"font-size: 14px; font-family: Courier; white-space: pre-wrap; text-decoration: none; line-height: 14px; color: rgb(0, 0, 0);\">        \"Execute a command and return a parsed response\"\n</span></p><p style=\"text-align:left;\"><span style=\"font-size: 14px; font-family: Courier; white-space: pre-wrap; text-decoration: none; line-height: 14px; color: rgb(0, 0, 0);\">        pool = self.connection_pool\n</span></p><p style=\"text-align:left;\"><span style=\"font-size: 14px; font-family: Courier; white-space: pre-wrap; text-decoration: none; line-height: 14px; color: rgb(0, 0, 0);\">        command_name = args[0]\n</span></p><p style=\"text-align:left;\"><span style=\"font-size: 14px; font-family: Courier; white-space: pre-wrap; text-decoration: none; line-height: 14px; color: rgb(0, 0, 0);\">        connection = pool.get_connection(command_name, **options)\n</span></p><p style=\"text-align:left;\"><span style=\"font-size: 14px; font-family: Courier; white-space: pre-wrap; text-decoration: none; line-height: 14px; color: rgb(0, 0, 0);\">        try:\n</span></p><p style=\"text-align:left;\"><span style=\"font-size: 14px; font-family: Courier; white-space: pre-wrap; text-decoration: none; line-height: 14px; color: rgb(0, 0, 0);\">            connection.send_command(*args)\n</span></p><p style=\"text-align:left;\"><span style=\"font-size: 14px; font-family: Courier; white-space: pre-wrap; text-decoration: none; line-height: 14px; color: rgb(0, 0, 0);\">            return self.parse_response(connection, command_name, **options)\n</span></p><p style=\"text-align:left;\"><span style=\"font-size: 14px; font-family: Courier; white-space: pre-wrap; text-decoration: none; line-height: 14px; color: rgb(0, 0, 0);\">        except (ConnectionError, TimeoutError) as e:\n</span></p><p style=\"text-align:left;\"><span style=\"font-size: 14px; font-family: Courier; white-space: pre-wrap; text-decoration: none; line-height: 14px; color: rgb(0, 0, 0);\">            connection.disconnect()\n</span></p><p style=\"text-align:left;\"><span style=\"font-size: 14px; font-family: Courier; white-space: pre-wrap; text-decoration: none; line-height: 14px; color: rgb(0, 0, 0);\">            if not connection.retry_on_timeout and isinstance(e, TimeoutError):\n</span></p><p style=\"text-align:left;\"><span style=\"font-size: 14px; font-family: Courier; white-space: pre-wrap; text-decoration: none; line-height: 14px; color: rgb(0, 0, 0);\">                raise\n</span></p><p style=\"text-align:left;\"><span style=\"font-size: 14px; font-family: Courier; white-space: pre-wrap; text-decoration: none; line-height: 14px; color: rgb(0, 0, 0);\">            connection.send_command(*args)\n</span></p><p style=\"text-align:left;\"><span style=\"font-size: 14px; font-family: Courier; white-space: pre-wrap; text-decoration: none; line-height: 14px; color: rgb(0, 0, 0);\">            return self.parse_response(connection, command_name, **options)\n</span></p><p style=\"text-align:left;\"><span style=\"font-size: 14px; font-family: Courier; white-space: pre-wrap; text-decoration: none; line-height: 14px; color: rgb(0, 0, 0);\">        finally:\n</span></p><p style=\"text-align:left;\"><span style=\"font-size: 14px; font-family: Courier; white-space: pre-wrap; text-decoration: none; line-height: 14px; color: rgb(0, 0, 0);\">        pool.release(connection)</span></p>","paddingLeft":2,"paddingRight":2,"paddingBottom":2,"paddingTop":2}},"children":null,"linkMap":[]},{"x":70,"y":140,"rotation":0,"id":0,"uid":"com.gliffy.shape.basic.basic_v1.default.text","width":510,"height":42,"lockAspectRatio":false,"lockShape":false,"order":0,"graphic":{"type":"Text","Text":{"tid":null,"valign":"middle","overflow":"none","vposition":"none","hposition":"none","html":"<p style=\"text-align:left;\"><span style=\"font-size: 14px; font-family: Courier; white-space: pre-wrap; text-decoration: none; line-height: 14px; color: rgb(0, 0, 0);\">def hget(self, name, key):\n</span></p><p style=\"text-align:left;\"><span style=\"font-size: 14px; font-family: Courier; white-space: pre-wrap; text-decoration: none; line-height: 14px; color: rgb(0, 0, 0);\">    \"Return the value of ``key`` within the hash ``name``\"\n</span></p><p style=\"text-align:left;\"><span style=\"font-size: 14px; font-family: Courier; white-space: pre-wrap; text-decoration: none; line-height: 14px; color: rgb(0, 0, 0);\">    return self.execute_command('HGET', name, key)</span></p>","paddingLeft":2,"paddingRight":2,"paddingBottom":2,"paddingTop":2}},"children":null,"linkMap":[]},{"x":300.6666666666667,"y":44,"rotation":0,"id":29,"uid":"com.gliffy.shape.basic.basic_v1.default.line","width":100,"height":100,"lockAspectRatio":false,"lockShape":false,"order":11,"graphic":{"type":"Line","Line":{"strokeWidth":2,"strokeColor":"#000000","fillColor":"none","dashStyle":null,"startArrow":0,"endArrow":1,"startArrowRotation":"auto","endArrowRotation":"auto","ortho":false,"interpolationType":"linear","cornerRadius":null,"controlPath":[[5.684341886080802e-14,4.959325017856813],[0,92.39348221360399]],"lockSegments":{}}},"children":null,"linkMap":[]},{"x":81,"y":1010,"rotation":0,"id":30,"uid":"com.gliffy.shape.basic.basic_v1.default.text","width":490,"height":70,"lockAspectRatio":false,"lockShape":false,"order":12,"graphic":{"type":"Text","Text":{"tid":null,"valign":"middle","overflow":"none","vposition":"none","hposition":"none","html":"<p style=\"text-align:left;\"><span style=\"font-size: 14px; font-family: Courier; color: rgb(255, 0, 0); white-space: pre-wrap; text-decoration: none; line-height: 14px;\">The make_connection call may raise ConnectionError exception, and this call stack will never catch it, the the default exception handler will handle it, and it will stop the program and show the exception error to user.</span></p>","paddingLeft":2,"paddingRight":2,"paddingBottom":2,"paddingTop":2}},"children":null,"linkMap":[]}],"background":"#FFFFFF","width":728,"height":1089,"maxWidth":5000,"maxHeight":5000,"nodeIndex":31,"autoFit":true,"exportBorder":false,"gridOn":true,"snapToGrid":true,"drawingGuidesOn":true,"pageBreaksOn":false,"printGridOn":false,"printPaper":"LETTER","printShrinkToFit":false,"printPortrait":true,"shapeStyles":{},"lineStyles":{"global":{"endArrow":1}},"textStyles":{},"themeData":null}}